using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using RainstormStudios.Collections;

namespace RainstormStudios.Reflection
{
    public class TypeCollection : ObjectCollection
    {
        #region Declarations
        //***************************************************************************
        // Global Variables
        // 
        Assembly _owner;
        string _ns;
        #endregion

        #region Public Properties
        //***************************************************************************
        // Public Properties
        // 
        public new Type this[int index]
        {
            get { return (Type)base[index]; }
            set { base[index] = value; }
        }
        public new Type this[string key]
        {
            get { return (Type)base[key]; }
            set { base[key] = value; }
        }
        public Assembly Parent
        { get { return this._owner; } set { this._owner = value; } }
        public string Namespace
        { get { return this._ns; } set { this._ns = value; } }
        #endregion

        #region Class Constructors
        //***************************************************************************
        // Class Constructors
        // 
        public TypeCollection()
            : base()
        { }
        public TypeCollection(Assembly asm)
            : this(asm, "")
        { }
        public TypeCollection(Assembly asm, string ns)
            : this()
        {
            this._owner = asm;
            this._ns = ns;
        }
        #endregion

        #region Public Methods
        //***************************************************************************
        // Public Methods
        // 
        public void LoadTypes()
        {
            if (this._owner == null)
                throw new Exception("Cannot load Types into collection.  Parent assembly not set.");

            this.LoadTypes(this._owner, this._ns);
        }
        public void LoadTypes(Assembly asm, string ns)
        {
            this._owner = asm; this._ns = ns;
            foreach (Type t in asm.GetTypes())
                // Don't process this Type if it's not in the specified
                //   namespace or generated by .NET
                if (t != null && !string.IsNullOrEmpty(t.Namespace) && !t.IsSpecialName && (t.Namespace == ns || string.IsNullOrEmpty(ns)))
                    this.Add(t, t.FullName);
        }
        public new Type[] ToArray()
        {
            return this.ToArray(0, this.List.Count);
        }
        public new Type[] ToArray(int offset, int length)
        {
            return Array.ConvertAll(base.ToArray(offset, length), new Converter<Object, Type>(this.CastObject));
        }
        #endregion

        #region Private Methods
        //***************************************************************************
        // Protected Methods
        // 
        protected Type CastObject(object value)
        {
            return (Type)value;
        }
        #endregion
    }
}
